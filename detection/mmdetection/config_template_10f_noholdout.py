def get_config_text(model, fold, work_dir, train_positive=False):
    suffix = ''
    if train_positive:
        suffix = '_positive'  
    if model == 'tood':
        text =  [
        "_base_ = '../configs/tood/tood_r101_fpn_mstrain_2x_coco.py'\n",
        '# model settings\n', 
        'model = dict(\n',
        '    bbox_head=dict(num_classes=1))\n', 
        '\n', 
        "classes = ('Pneumothorax',)\n", 
        'data = dict(\n', 
        '    samples_per_gpu=3,\n', 
        '    workers_per_gpu=2,\n', 
        '    train=dict(\n', 
        "        img_prefix='../../data/images',\n", 
        '        classes=classes,\n', 
        f"        ann_file='../../data/10f_traininglist_noholdout/train_fold{fold}{suffix}.json'),\n", 
        '    val=dict(\n', 
        "        img_prefix='../../data/images',\n", 
        '        classes=classes,\n', 
        f"        ann_file='../../data/10f_traininglist_noholdout/test_fold{fold}.json'),\n", 
        '    test=dict(\n', 
        "        img_prefix='../../data/images',\n", 
        '        classes=classes,\n', 
        f"        ann_file='../../data/10f_traininglist_noholdout/test_fold{fold}.json'))\n", 
        '\n', 
        '\n', 
        f"work_dir = '{work_dir}/tood/fold_{fold}{suffix}'\n", 
        'checkpoint_config = dict(interval=-1)\n', 
        "evaluation = dict(interval=1, save_best='bbox_mAP_50')\n", 
        "load_from = 'https://download.openmmlab.com/mmdetection/v2.0/tood/tood_r101_fpn_mstrain_2x_coco/tood_r101_fpn_mstrain_2x_coco_20211210_144232-a18f53c8.pth'\n"
        ]
    elif model == 'deformable_detr':
        text = ["_base_ = '../configs/deformable_detr/deformable_detr_r50_16x2_50e_coco.py'\n",
        '\n',
        '# model settings\n', 
        'model = dict(\n',
        '    bbox_head=dict(num_classes=1))\n', 
        "classes = ('Pneumothorax',)\n",
        'data = dict(\n',
        '    samples_per_gpu=2,\n',
        '    workers_per_gpu=2,\n',
        '    train=dict(\n',
        "        img_prefix='../../data/images',\n",
        '        classes=classes,\n',
        f"        ann_file='../../data/10f_traininglist_noholdout/train_fold{fold}{suffix}.json'),\n",
        '    val=dict(\n',
        "        img_prefix='../../data/images',\n",
        '        classes=classes,\n',
        f"        ann_file='../../data/10f_traininglist_noholdout/test_fold{fold}.json'),\n",
        '    test=dict(\n',
        "        img_prefix='../../data/images',\n",
        '        classes=classes,\n',
        f"        ann_file='../../data/10f_traininglist_noholdout/test_fold{fold}.json'))\n",
        '\n',
        '\n',
        f"work_dir = '{work_dir}/deformable_detr/fold_{fold}{suffix}'\n",
        'checkpoint_config = dict(interval=-1)\n',
        "evaluation = dict(interval=1,save_best='bbox_mAP_50')\n"
        "load_from = 'https://download.openmmlab.com/mmdetection/v2.0/deformable_detr/deformable_detr_r50_16x2_50e_coco/deformable_detr_r50_16x2_50e_coco_20210419_220030-a12b9512.pth'\n",
        ]
    elif model == 'vfnet':
        text = ["_base_ = '../configs/vfnet/vfnet_r50_fpn_mstrain_2x_coco.py'\n",
         '# model settings\n',
         'model = dict(\n',
         '    bbox_head=dict(num_classes=1))\n',
         '\n',
         "classes = ('Pneumothorax',)\n",
         'data = dict(\n',
         '    samples_per_gpu=3,\n',
         '    workers_per_gpu=2,\n',
         '    train=dict(\n',
         "        img_prefix='../../data/images',\n",
         '        classes=classes,\n',
         f"        ann_file='../../data/10f_traininglist_noholdout/train_fold{fold}{suffix}.json'),\n",
         '    val=dict(\n',
         "        img_prefix='../../data/images',\n",
         '        classes=classes,\n',
         f"        ann_file='../../data/10f_traininglist_noholdout/test_fold{fold}.json'),\n",
         '    test=dict(\n',
         "        img_prefix='../../data/images',\n",
         '        classes=classes,\n',
         f"        ann_file='../../data/10f_traininglist_noholdout/test_fold{fold}.json'))\n",
         '\n',
         '\n',
         f"work_dir = '{work_dir}/vfnet/fold_{fold}{suffix}'\n",
         'checkpoint_config = dict(interval=-1)\n',
         "evaluation = dict(interval=1,save_best='bbox_mAP_50')\n",
         "load_from = 'https://download.openmmlab.com/mmdetection/v2.0/vfnet/vfnet_r50_fpn_mdconv_c3-c5_mstrain_2x_coco/vfnet_r50_fpn_mdconv_c3-c5_mstrain_2x_coco_20201027pth-6879c318.pth'\n"]
 
    else:
        print('no match model template')
    return text